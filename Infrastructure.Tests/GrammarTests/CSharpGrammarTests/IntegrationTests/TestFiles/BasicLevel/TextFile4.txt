using CleanArchitectureWorkshop.Application.Repositories;
using CleanArchitectureWorkshop.Domain.TeamAggregate;

namespace CleanArchitectureWorkshop.Application.UseCases
{
    public class TeamsUseCase : ITeamsUseCase
    {
        private readonly ITeamsRepository _teamsRepository;

        public async Task<List<Team>> GetTeamsByNameAsync(string searchTerm)
        {
        }
    }

    public class Team : AggregateRoot<TeamName>
    {
        private readonly List<Player> _players;
        public IReadOnlyCollection<Player> Players;

        protected Team()
        {
        }

        public void AddPLayer(Player player)
        {
            _players.Add(player);
            player.AssignTeam(this);
        }

        public void RemovePlayer(UserName player)
        {
            var playerToRemove = _players.FirstOrDefault();

            _players.Remove(playerToRemove);
            playerToRemove.UnassignTeam();
        }
    }
}

namespace com.packages.TeamUtils
{
    public class TeamManager
    {
        private readonly ITeamsRepository _teamsRepository;

        public async Task<Team> AddPlayerToTeamAsync(string teamName, string playerName)
        {
        }

        public async Task<Team> CreateTeamAsync(string teamName)
        {
        }

        public async Task<List<Team>> GetAllTeamsAsync()
        {
        }

    }

    public class Director
    {
        public async Task<Team> CreateTeamAsync(string teamName)
        {
        }
    }

    public class Player : AggregateRoot<TeamName>
    {
        public void RemovePlayer(UserName player)
        {
            var playerToRemove = _players.FirstOrDefault();

            _players.Remove(playerToRemove);
            playerToRemove.UnassignTeam();
        }
    }
}

