using CleanArchitectureWorkshop.Application.Repositories;
using CleanArchitectureWorkshop.Domain.TeamAggregate;

namespace CleanArchitectureWorkshop.Application.UseCases;

public class Entity
{
    private string grandParentProperty;

    public string GetEntityName()
    {
        return grandParentProperty;
    }
}

public class ITeamsUseCase : Entity
{
    private readonly ITeamsUseCaseProperty parentProperty;

    public override string ToString()
    {
        return GetEntityName();
    }
}

public class TeamsUseCase : ITeamsUseCase
{
    private readonly ITeamsRepository _teamsRepository;

    public async Task<Team> AddPlayerToTeamAsync(string teamName, string playerName)
    {
        var teamId = TeamName.Create(teamName);

        var team = await _teamsRepository.GetByIdAsync(teamId);

        var playerId = UserName.Create(playerName);
        var player = new Player(playerId);

        team.AddPlayer(player);

        await _teamsRepository.UpdateTeamAsync(team);
        var myVar = parentProperty.DoSomething();
        myVar.PrintResults();

        return team;
    }

}
