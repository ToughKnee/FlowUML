namespace Domain.CodeInfo.InstanceDefinitions
{
    public abstract class AbstractInstance
    {
        public void ReceiveLocalVariableDefinition(string assignee, string? assigner, List<AbstractBuilder<AbstractInstance>>? instanceAssignerBuilders)
        {
            var methodInstanceAssigner = ((MethodInstanceBuilder)instanceAssignerBuilders[0])
                .Build(((AAAAAAAAAAAAAAAAAAAAAAAAAAAA)MyVariable.VariableFunction()).AAAAAAAAAAAAAFunction(ase));
            var callerClassVariable = ((MethodInstance)_ownedChainedMethodInstanceBuilder.Build()).callerClass;
            var propertyFromClassCasted = (object)(anotherVariable.originalProperty).castedProperty;
            if (true)
            {
            }
        }
        
        public void ReceiveClassEntityBuilders(List<AbstractBuilder<ClassEntity>> builders)
        {
            foreach (var builder in builders)
            {
                builder.Build();
            }
        }
    }

}

namespace Infrastructure.Builders
{
    public interface AbstractBuilder<T>
    {
        public T Build();
    }
}

namespace Infrastructure.Builders
{
    public class InstanceBuilder : AbstractBuilder<AbstractInstance>
    {
        protected AbstractInstance? _callerClass = null;
        protected AbstractInstance? _callerClassChainedInstance = null;
        protected AbstractInstance? _indexRetrievalInstance = null;
        protected string? _type = null;
        protected KindOfInstance _methodInstanceKind = KindOfInstance.Normal;
        protected readonly string _paramIdentifier = "<p>";
        protected IMediator _mediator;
        protected IReadOnlyDictionary<string, AbstractInstance> _knownInstancesDeclaredInCurrentMethodAnalysis = new Dictionary<string, AbstractInstance>();

        public InstanceBuilder(IMediator mediator)
        {
            _mediator = mediator;
            _knownInstancesDeclaredInCurrentMethodAnalysis = mediator.GetKnownInstancesDeclaredInCurrentMethodAnalysis();
        }
        public InstanceBuilder()
        {
        }

        public AbstractInstance Build()
        {
            _callerClass.chainedInstance = _callerClassChainedInstance;
            if(_type != null)
            {
                _callerClass.kind = KindOfInstance.Normal;
                _callerClass.refType.data = _type;
            }
            AbstractInstance.GetLastChainedInstance(_callerClass).indexRetrievedInstance = _indexRetrievalInstance;
            return _callerClass;
        }
    }
}