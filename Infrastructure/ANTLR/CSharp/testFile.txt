using CleanArchitectureWorkshop.Application.Repositories;
using CleanArchitectureWorkshop.Domain.TeamAggregate;

namespace CleanArchitectureWorkshop.Application.UseCases
{
    public class Entity
    {
        private string grandParentProperty;

        public string GetEntityName()
        {
            return grandParentProperty;
        }
    }

    public class ITeamsUseCase : Entity
    {
        private readonly MyProperty parentProperty;

        public override string ToString()
        {
            return GetEntityName();
        }
    }

    public class TeamsUseCase : ITeamsUseCase
    {
        private readonly ITeamsRepository _teamsRepository;

        public Team AddPlayerToTeam(string teamName, string playerName)
        {
            var teamId = TeamName.Create(teamName);

            var team = _teamsRepository.GetById(teamId);

            var playerId = UserName.Create(playerName);
            var player = new Player(playerId);

            team.AddPlayer(player);

            _teamsRepository.UpdateTeam(team);
            var myVar = parentProperty.GetPrinter();
            myVar.PrintResults();

            return team;
        }
    }
    public class MyProperty
    {
        private Printer _printer;

        public Printer GetPrinter()
        {
            return _printer;
        }
    }
    public class Printer
    {
        public Printer PrintResults()
        {
        }
    }
}

namespace CleanArchitectureWorkshop.Domain.TeamAggregate
{
    public class TeamName
    {
        public string Value;

        private TeamName(string value)
        {
        }

        public static TeamName Create(string value)
        {
            return new TeamName(value);
        }
    }

    public class UserName
    {
        public string Value;

        private UserName(string value)
        {
        }

        public static UserName Create(string value)
        {
            return new UserName(value);
        }
    }
    public class Team : AggregateRoot<TeamName>
    {
        private readonly List<Player> _players;
        public Team(TeamName name)
        {
        }

        public void AddPlayer(Player player)
        {
            _players.Add(player);
            player.AssignTeam(this);
        }
    }
    public class Player
    {
        public Team? Team;

        public Player(UserName userName)
        {
        }
        private Player()
        {
        }

        public void AssignTeam(Team team)
        {
        }
    }
}

namespace CleanArchitectureWorkshop.Infrastructure.Repositories
{
    internal class TeamsRepository : ITeamsRepository
    {
        private readonly ApplicationDbContext _dbContext;

        public TeamsRepository(ApplicationDbContext dbContext)
        {
        }

        public Team GetById(TeamName teamName)
        {
        }

        public void UpdateTeam(Team team)
        {
            _dbContext.Teams.Update(team);
            _dbContext.SaveChanges();
        }
    }
}
