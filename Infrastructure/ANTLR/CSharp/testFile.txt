using CleanArchitectureWorkshop.Application.Repositories;
using CleanArchitectureWorkshop.Domain.TeamAggregate;

namespace CleanArchitectureWorkshop.Application.UseCases;

public class TeamsUseCase : ITeamsUseCase
{
    private readonly ITeamsRepository _teamsRepository;

    public TeamsUseCase(ITeamsRepository teamsRepository)
    {
    }

    public async Task<Team> AddPlayerToTeamAsync(string teamName, string playerName)
    {
        var teamId = TeamName.Create(teamName);

        var team = await _teamsRepository.GetByIdAsync(teamId);

        var playerId = UserName.Create(playerName);
        var player = new Player(playerId);

        team.AddPLayer(player);

        await _teamsRepository.UpdateTeamAsync(team);

        return team;
    }

    public async Task<Team> RemovePlayerFromTeamAsync(string teamName, string playerName)
    {
        var teamId = TeamName.Create(teamName);

        var team = await _teamsRepository.GetByIdAsync(teamId);

        var playerId = UserName.Create(playerName);

        team.RemovePlayer(playerId);

        await _teamsRepository.UpdateTeamAsync(team);

        return team;
    }

    public async Task<List<Team>> GetTeamsByNameAsync(string searchTerm)
    {
        return await _teamsRepository.GetTeamsByNameAsync(searchTerm);
    }
}
