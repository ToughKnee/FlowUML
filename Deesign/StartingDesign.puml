@startuml

'skinparam componentStyle uml1
'skinparam linetype polyline
'skinparam linetype ortho
skinparam Nodesep 45
'skinparam Ranksep 45
'top to bottom direction
left to right direction
skinparam wrapWidth 450
Skinparam backgroundColor #EEEBDC
skinparam class {
ArrowColor Maroon
BorderColor Maroon
BackgroundColor  #fefece
ArrowThickness 2
}

'//===========================  Layout object, invisible object to maipualte the position of other objects
skinparam class<<Layout>> {
  borderColor Transparent
  backgroundColor Transparent
  fontColor Transparent
  stereotypeFontColor Transparent
}
class layouter <<Layout>>
'//====

package Presentation #ade
{
  class Program
  {
    Receive **a path** to a repository with code
  }
}


package Infrastructure #ddd 
{
  class FileService
  {
    +===StartNavigation(string path)
    Receives the path and starts the process of traversal

  }

  'Make entry point to this place
  class ANTLRService
  {
    +===ProcessTextfile
  }
}
note as infLayerNote
  Has the services that are requested by anyone as **interfaces** and implements them through **Dependency Inversion**
  end note
  infLayerNote -> Infrastructure







package Application #d99
{
  'TODO: Rethink if this is a good way to manipulate a **Flow** 
  class ConvertClassEntitysToUml
  {
    Converts an array of class objects and outputs a string that is formatted with the pantuml class diagram for those classes
  }

  class MapDataFlowsFromClassEntities
  {
    Gets the classes 
  }

  class FileUseCases
  {
    Uses the file utils from the Infrastructure layer and performs the main operations to use the file hierarchy
  }
}









package Domain #889
{
  'TODO: Rethink as  just **Flow** instead of this name
  class ClassEntitysFlow
  {
    Provides a simpler way to represent a **Flow**, which has classes interacting with one another and may take up more stuff
  }

  class Callsite
  {
    Represents mainly a **Method**, but one that is yet to be recognized, because to define a Method we need its ClassEntity owner, Method name and parameters(the method's signature), and most likely we will only find the name when making the static analisys of the code
    Used to make the **calls** methods will make to other methods and build the flow of them
    Very important to make edges from the class Entity to the callsite in plantUML
    <color:Red>This subscribes to an event **only if** the CalledMethod is not found an instance implementation from the InstancesMap and thus when the ClassEntity creates the complete Methods, it will raise events for each of those, where **this Callsite** is going to be listening and replace the **CalledMethod** with the one from the event
    <color:fa00df>This will always subscribe to an event of end of file system traveling, it desubscribes when the CalledMethod is found an
    -===Method? CalledMethod
    It may be null when the method called is from a ClassEntity not defined yet, so we wait for the **Instance** that has the name of that method to receive the event that defines the method and make him fill this CalledMethod
    -===bool hasCompleteMethod
    Used to know if this callsite has the "calledMethod" with a ClassEntity, 
    Method name and parameters(basically the Method's signature)

   ==Creation of a Callsite
    The callsite will be created everytime we discover curly braces that are
    the scope of a method from the class we are building,
    if there is a method called from anything in here, 
    the callsite then gets completed(CallerMethod is the current method,
    and CalledMethod would be the method we found, while we also
    add the sequence(number of step) this callsite will have assigned) AND WE CREATE ANOTHER Callsite
    Because when we go to another method, the curly braces are again discovered and we repeat

    =<color:Red>Useless, delete
    -===ClassEntity ClassOwner
    This exists if the Callsite is created, but we are not building the ClassEntity this callsite comes from, so that when we build the corresponding ClassEntity, we assign it to this ClassEntity
    ----
  }

  /'
  Problem about methods that return a type we don't know
  We are building class A, and we are building the Flow with the callsites
  There is a callsite that heads into the method of class B, which we don't know yet
  And the return type we also don't know'/

  class Method
  {
    A method that must be identifiable with the **Method Parameters and belonging ClassEntity** 
    -===ClassEntity? OwnerClass
    Null if this is a lone function
    -===List<string> parameters
    This only stores the **Types** of the params
    -===string? ReturnType
    This is the Type of the return type if any, so that it is easier to check what instance would a method return(when building a Flow)
    -===List<Callsite> callsites
    This will represent other methods or functions this method calls in its Method's Body
    This way we will create an entire flow from a class to all other places of the code, regardless of the depth of the calls
    ----
    +===string Signature()
    This returns the identifier of the Method as...
    ""ClassEntity:MethodName(parameters):HasLambda""
  }

  class ClassEntity
  {
    Representation of a class found in the files, used to print the plantUML diagram
    <color:Blue>Everytime this class is created, it must fill out the InstancesMap by defining the return type of the constructors **and** the methods it has, when it finishes, it must raisse an event that lets know everyone that there are definitions in the InstancesMap if there were methods that were left behind
    -===string Name
    Name of the class
    -===List<Properties> Properties
    Simple Properties to show
    -===List<Methods> Methods
    List of the methods this class has defined, this list also will define the **Flow** of this calss
    -===static Map<Instance, Instance> InstancesMap
    <color:3c3>TODO: Move this to another Class for single responsibility
    This will let us identify each **variable, parameter, attribute and method return variable** to its <color:Blue>**corresponding Type**</color> for both inside of this class(but we delete from here scoped instances) OR also instances out of this class(like methods or static variables)
    *Variables are easy to find out their implementation
    A left instance is something we found like a variable, which are on the left side of an assignment('='), and the right side Instance represents to what **Type or Alias** this instance is linked in the program, the right side of an assignment...
    ""var bob = new Human()"" : Type mapping
    ""var storeWorker = bob"" : Alias mapping
    -===int SequenceSize => CalledClasses.Size
    This represents the steps this class has in a given path, the Sequence is shared to Callsites so that they know which step they are in the sequence AND increment the sequence size 
    ----
  }

  struct Instance
  {
    An instance is a variable, parameter or method return type that **has a type** which we need to know when a ClassEntity calls another ClassEntity
    ====Basically a variable/parameter/property/method that has a given **Type provided by another Instance**
    And this lets us map any variable to a **ClassEntity** eventually
    -===string Name
    The name of the variable/parameter/property this is defined as in code with the given Type
    This kind of instances will usually go to the left of the **InstancesMap**
    **IF** this is a method with a return type, this **should go to the right of the InstancesMap**
    <color:Blue>If when looking into the InstancesMap we don't find this method with an Implementation, its because we are either missing the ClassEntity registering all his methods in the RegisteredClassEntities, or there are parameters that don't have an Implementation, then this class should subscribe to an event that is triggered by ClassEntities, and this will tell the instance to look again for the InstancesMap to find again what was the type it was missing(""Pass this to a special class? And make both classes inherit from abstract class?(One class will represent //variable/parameter/property//, and the other will represent the //method return types// which have special logic, and both will inherit from an abstract class to be referred to both classes since they are the same thing essentially""))
    The name should look like ""ClassEntity:MethodName(parameters)""
    -===<color:Blue>Callsite? LinkedCallsite
    This exists because if the instance has the name of a method, and gets defined the **Implementation of this method** from an event where a ClassEntity defined itself and this method, or it was already defined, then it should fill out the Callsite CalledMethod too, because the Callsite will not know 
    -===ClassEntity? Implementation
    This value may be null, but when it is not null, it means that we found the actual Implementation of all the other instances connected with the aliases, letting us fill the **Implementation** from all the other instances
    <color:Blue>For variables, we define it through the right side of the '=', which eventually leads to a constructor to a ClassEntity OR return type of a Method
    <color:Blue>For parameters or attributes, we define it through the Type before the name of th instance
    ----
  }

}
/'
There must be an entity, which represents a class in the code files, and make connection to other classes

'/




'//===========================  Connections
Instance --> Instance : References itself in the Class map but \n**with different names**(Alias)
Instance --> ClassEntity : > Points eventually to a \ndefinition of ClassEntity
ClassEntity "1" *-r- "N" Method : > Has
ClassEntity "1" *-- "N" Callsite : > Has



@enduml