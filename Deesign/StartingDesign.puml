@startuml

'skinparam componentStyle uml1
'skinparam linetype polyline
'skinparam linetype ortho
skinparam Nodesep 45
'skinparam Ranksep 45
'top to bottom direction
left to right direction
skinparam wrapWidth 450
Skinparam backgroundColor #EEEBDC
skinparam class {
ArrowColor Maroon
BorderColor Maroon
BackgroundColor  #fefece
ArrowThickness 2
}

'//===========================  Layout object, invisible object to maipualte the position of other objects
skinparam class<<Layout>> {
  borderColor Transparent
  backgroundColor Transparent
  fontColor Transparent
  stereotypeFontColor Transparent
}
class layouter <<Layout>>
'//====

package Presentation #ade
{
  class Console
  {
    Takes input and prints text

  }
}


package Infrastructure #ddd 
{
  class FileUtils
  {
    Has the most basic operations to perform in file hierarchies
  }
}
note as infLayerNote
  Has the services that are requested by anyone as **interfaces** and implements them through **Dependency Inversion**
  end note
  infLayerNote -> Infrastructure


package Application #d99
{
  'TODO: Rethink if this is a good way to manipulate a **Flow** 
  class ConvertClassObjectsToUml
  {
    Converts an array of class objects and outputs a string that is formatted with the pantuml class diagram for those classes
  }

  class MapDataFlowsFromClassObjects
  {
    Gets the classes 
  }

  class FileUseCases
  {
    Uses the file utils from the Infrastructure layer and performs the main operations to use the file hierarchy
  }
}
package Domain #889
{
  'TODO: Rethink as  just **Flow** instead of this name
  class ClassObjectsFlow
  {
    Provides a simpler way to represent a **Flow**, which has classes interacting with one another and may take up more stuff
  }

  class ClassObject
  {
    Representation of a class found in the files, which may contain other classes
    -List<ClassObject> Classes 
  }
}

@enduml